---
import { Icon } from "astro-icon/components";

interface ImageTab {
  label: string;
  icon: string;
  description: string;
  href: string;
}

interface Props {
  tabs: ImageTab[];
  class?: string;
}

const { tabs, class: className } = Astro.props;
---

<div class:list={["grid grid-cols-1 xl:grid-cols-[1fr_2fr] gap-8", className]}>
  <div
    class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1 xl:w-80 gap-4 max-h-1/3"
    id="image-tabs-nav"
    role="tablist"
  >
    {
      tabs.map((tab) => (
        <button
          class="flex cursor-pointer items-center gap-4 bg-[#121220]/50 p-4 rounded-xl border-2 border-[#ffffff1a] text-left transition-all group text-secondary hover:text-white duration-350 ease-in-out"
          data-id={tab.label}
          role="tab"
        >
          <Icon
            name={tab.icon}
            class="icon p-2 aspect-square size-10 rounded-xl bg-dark-slate-blue transition-colors"
          />
          <span>{tab.label}</span>
        </button>
      ))
    }
  </div>

  <div
    class="flex flex-col items-center justify-start text-center min-h-[500px] xl:min-h-[550px] opacity-100 transition-opacity duration-500"
    id="content"
  >
    <div class="w-full aspect-video relative mb-6">
      <img
        src=""
        alt=""
        id="image-tab"
        class="rounded-xl object-cover object-top w-full h-full absolute inset-0"
      />
    </div>

    <p class="text-secondary max-w-xl" id="image-tab-description"></p>
  </div>
</div>

<script is:inline define:vars={{ tabs }}>
  const nav = document.getElementById("image-tabs-nav");
  const buttons = Array.from(nav.querySelectorAll("button"));
  const image = document.getElementById("image-tab");
  const description = document.getElementById("image-tab-description");

  function setActiveButton(button, tab) {
    buttons.forEach((btn) => {
      btn.classList.remove("bg-darker-background", "text-white");
      btn.classList.add("text-secondary");
      btn.setAttribute("aria-selected", "false");

      const icon = btn.querySelector(".icon");
      icon?.classList.remove("bg-[#B84EF4]");
      icon?.classList.add("bg-dark-slate-blue");
    });

    button.classList.add("bg-darker-background", "text-white");
    button.classList.remove("text-secondary");
    button.setAttribute("aria-selected", "true");

    const icon = button.querySelector(".icon");
    icon?.classList.add("bg-[#B84EF4]");
    icon?.classList.remove("bg-dark-slate-blue");

    // Animate content fade-out and fade-in
    requestAnimationFrame(() => {
      content.classList.remove("opacity-100");
      content.classList.add("opacity-0");

      setTimeout(() => {
        image.onload = () => {
          requestAnimationFrame(() => {
            content.classList.remove("opacity-0");
            content.classList.add("opacity-100");
          });
        };

        image.src = tab.href;
        image.alt = tab.label;
        description.textContent = tab.description;
      }, 250);
    });
  }

  nav.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (!button) return;

    if (button.getAttribute("aria-selected") === "true") return;

    const id = button.dataset.id;
    const tab = tabs.find((t) => t.label === id);
    if (!tab) return;

    setActiveButton(button, tab);
  });

  // Activate the first tab by default
  setActiveButton(buttons[0], tabs[0]);
</script>
